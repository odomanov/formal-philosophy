-- See Barwise, Cooper - Generalized Quantifiers and Natural Language

open import Nat using (‚Ñï; zero; suc; _‚â§_; _<_; _‚â•_; _>_)

module _ where

open import TTCore


-- –ö–≤–∞–Ω—Ç–æ—Ä —ç—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Ç–∏–ø–µ –≤—Å–µ—Ö x, —Ç–∞–∫–∏—Ö, —á—Ç–æ P x.
-- –¢.–æ. –∫–≤–∞–Ω—Ç–æ—Ä —ç—Ç–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ Œ£-—Ç–∏–ø–µ.

-- –í—Å–µ –∫–≤–∞–Ω—Ç–æ—Ä—ã –∏–º–µ—é—Ç —Ç–∏–ø (A : Set) (v : A ‚Üí Set) ‚Üí Set
QUANTIFIER : ‚àÄ {‚Ñì} ‚Üí Set (lsuc ‚Ñì)
QUANTIFIER {‚Ñì} = (A : Set) (v : A ‚Üí Set) ‚Üí Set ‚Ñì


------------------------------------------------------------------------
-- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–≤–∞–Ω—Ç–æ—Ä
Qall : QUANTIFIER
Qall A v = ‚àÄ (x : A) ‚Üí v x      -- –¥–æ–∫-–≤–æ = –≤—Å–µ –ø–∞—Ä—ã; Œ£-—Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ x : A

-- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–≤–∞–Ω—Ç–æ—Ä –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ Œ£-—Ç–∏–ø–µ.
-- –ü–µ—Ä–≤–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –∏–º–µ–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, —ç—Ç–æ
-- –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±–∏–µ–∫—Ü–∏—è –º–µ–∂–¥—É A –∏ Œ£ A v, —Ç–æ –µ—Å—Ç—å
-- –æ–Ω–∏ —Ä–∞–≤–Ω–æ–º–æ—â–Ω—ã.
Qall' : QUANTIFIER
Qall' A v = Œ£[ f‚Åª¬π ‚àà (A ‚Üí Œ£ A v) ] ‚àÄ (x : A) ‚Üí proj‚ÇÅ (f‚Åª¬π x) ‚â° x

-- –î–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã.
t-all : ‚àÄ A v ‚Üí Qall' A v ‚Üí Qall A v
t-all A v (f‚Åª¬π , ‚â°x) x = subst v (‚â°x x) (proj‚ÇÇ (f‚Åª¬π x))

t-all' : ‚àÄ A v ‚Üí Qall A v ‚Üí Qall' A v
t-all' A v p = (Œª x ‚Üí x , (p x)) , (Œª x ‚Üí refl)


------------------------------------------------------------------------
-- —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–≤–∞–Ω—Ç–æ—Ä
Qsome : QUANTIFIER 
Qsome A v = Œ£ A v               -- –¥–æ–∫-–≤–æ = —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞—Ä–∞; Œ£-—Ç–∏–ø –Ω–µ –ø—É—Å—Ç

-- –≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–≤–∞–Ω—Ç–æ—Ä –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ Œ£-—Ç–∏–ø–µ.
-- –ò–º–µ–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ Œ£ A v.
Qsome' : QUANTIFIER
Qsome' A v = Œ£[ x ‚àà Œ£ A v ] ‚ä§ 

-- –û–±–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã.
t-some : ‚àÄ A v ‚Üí Qsome' A v ‚Üí Qsome A v
t-some A v p = proj‚ÇÅ p

t-some' : ‚àÄ A v ‚Üí Qsome A v ‚Üí Qsome' A v
t-some' A v p = p , tt



------------------------------------------------------------------------
-- "–ù–∏ –æ–¥–∏–Ω A –Ω–µ..."
Qno : QUANTIFIER 
Qno A v = (x : A) ‚Üí ¬¨ v x -- ‚ä•               -- —Ç.–µ. Œ£-—Ç–∏–ø –ø—É—Å—Ç


-- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ Œ£-—Ç–∏–ø–µ.
-- Œ£ A v –ø—É—Å—Ç.
Qno' : QUANTIFIER
Qno' A v = ¬¨ (Œ£ A v)


t-no : ‚àÄ A v ‚Üí Qno' A v ‚Üí Qno A v
t-no A v p = Œª x z ‚Üí p (x , z)

t-no' : ‚àÄ A v ‚Üí Qno A v ‚Üí Qno' A v
t-no' A v p x = p (proj‚ÇÅ x) (proj‚ÇÇ x)



------------------------------------------------------------------------
--== –∞—Ä—Ç–∏–∫–ª—å the ==

-- —Ç–∏–ø A —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
record Pointed (A : Set) : Set where
  field
    the : A
open Pointed    

-- The –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤ Pointed A.
-- "The A v" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤ A –µ—Å—Ç—å –æ–¥–∏–Ω –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∏ –æ–Ω v.
Qthe : (A : Set) ‚Üí {A‚Çö : Pointed A} ‚Üí (v : A ‚Üí Set) ‚Üí Set
Qthe A {A‚Çö} v = v (the A‚Çö)  



------------------------------------------------------------------------
--== two elements type ==

data Both (A : Set) : Set where
  both : (a b : A) ‚Üí a ‚â¢ b ‚Üí ((x : A) ‚Üí (x ‚â° a) ‚äé (x ‚â° b)) ‚Üí Both A 

Qboth : QUANTIFIER 
Qboth A v =
  Œ£ (Both A) Œª x ‚Üí v (proj‚ÇÅ (unboth x)) √ó v (proj‚ÇÇ (unboth x))  -- –¥–æ–∫-–≤–æ = –¥–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä—ã
  where
  unboth : {A : Set} ‚Üí Both A ‚Üí A √ó A
  unboth (both a b _ _) = (a , b)



------------------------------------------------------------------------
--== ‚Ñï elements types ==

-- power set
data ùí´ {‚Ñì} (A : Set ‚Ñì) : Set (lsuc ‚Ñì) where
  subs : (A ‚Üí Set) ‚Üí ùí´ A

postulate
  N= : {A : Set} (S : ùí´ A) (n : ‚Ñï) ‚Üí Set       -- N= S n => S has exactly n (different) elements
  N+ : {A : Set} (S : ùí´ A) (n : ‚Ñï) ‚Üí Set       -- N+ S n => S has minimum n (different) elements

-- subsets of A having exactly n elements
DN= : (A : Set) (n : ‚Ñï) ‚Üí Set‚ÇÅ
DN= A n = Œ£ (ùí´ A) (Œª x ‚Üí N= {A = A} x n)

getPred= : {A : Set} {n : ‚Ñï} ‚Üí DN= A n ‚Üí (A ‚Üí Set)
getPred= (subs f , _) = f

-- subsets of A having at least n elements
DN+ : (A : Set) (n : ‚Ñï) ‚Üí Set‚ÇÅ
DN+ A n = Œ£ (ùí´ A) (Œª x ‚Üí N+ {A = A} x n)

getPred+ : {A : Set} {n : ‚Ñï} ‚Üí DN+ A n ‚Üí (A ‚Üí Set)
getPred+ (subs f , _) = f


-- –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ S —Ä–∞–∑–º–µ—Ä–∞ n, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–µ—Ä–Ω–æ v.
-- œÄ: —Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –≥–æ—Ä–æ–¥–∞...
Q‚Ñï= : ‚àÄ (n : ‚Ñï) ‚Üí QUANTIFIER
Q‚Ñï= n A v = Œ£[ S ‚àà DN= A n ] ((x : Œ£ A (getPred= S)) ‚Üí v (proj‚ÇÅ x))

-- –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ S —Ä–∞–∑–º–µ—Ä–∞ ‚â• n, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–µ—Ä–Ω–æ v.
-- œÄ: —Ç—Ä–∏ –≥–æ—Ä–æ–¥–∞..., –±–æ–ª–µ–µ –¥—é–∂–∏–Ω—ã...
Q‚Ñï+ : ‚àÄ (n : ‚Ñï) ‚Üí QUANTIFIER
Q‚Ñï+ n A v = Œ£[ S ‚àà DN+ A n ] ((x : Œ£ A (getPred+ S)) ‚Üí v (proj‚ÇÅ x))




------------------------------------------------------------------------
-- == PN - personal nouns ==

data PN (A : Set) : Set where
  pn : (a : A) ‚Üí PN A
  
Qpn : {A : Set} (a : A) (v : A ‚Üí Set) ‚Üí Set  
Qpn a v = v a               -- v a –Ω–µ–ø—É—Å—Ç–æ; —Ç.–µ. (a , _) : Œ£ A v

-- –¢–æ –∂–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö —É—Å–ª–æ–≤–∏—è –Ω–∞ Œ£-—Ç–∏–ø
Qpn' : {A : Set} (a : A) (v : A ‚Üí Set) ‚Üí Set
Qpn' {A} a v = Œ£[ œÉ ‚àà Œ£ A v ] proj‚ÇÅ œÉ ‚â° a

-- –î–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã.
t-pn : (A : Set) (a : A) (v : A ‚Üí Set) ‚Üí Qpn' a v ‚Üí Qpn a v
t-pn A a v ((x , vx) , r) = subst v r vx

t-pn' : (A : Set) (a : A) (v : A ‚Üí Set) ‚Üí Qpn a v ‚Üí Qpn' a v
t-pn' A a v p = (a , p) , refl



------------------------------------------------------------------------
-- –ü—Ä–∏–º–µ—Ä—ã

postulate
  boy  : Set
  John : boy
  runs : boy ‚Üí Set
  jr   : runs John

-- John runs.
_ : Qpn John runs
_ = jr

-- Some boy runs.
_ : Qsome boy runs
_ = John , jr


-- No boy runs.
S0 = Qno boy runs

-- ?
_ : ¬¨ (Qno boy runs)
_ = Œª x ‚Üí x John jr

_ : Qsome boy runs ‚Üí ¬¨ (Qno boy runs)
_ = Œª x z ‚Üí z (proj‚ÇÅ x) (proj‚ÇÇ x)

-- –ù–µ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –¥–≤–æ–π–Ω–æ–≥–æ –æ—Ç—Ä–∏—Ü–∞–Ω–∏—è
_ : ¬¨ (Qno boy runs) ‚Üí Qsome boy runs
_ = {!!}


-- The boy runs.
_ : Qthe boy {A‚Çö = record { the = John }} runs
_ = jr   





------------------------------------------------------------------------
-- == –ö–≤–∞–Ω—Ç–æ—Ä—ã –∫–∞–∫ —Ç–∏–ø—ã == --

-- –ö–≤–∞–Ω—Ç–æ—Ä = —Ç–∏–ø –ø–∞—Ä, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –Ω–µ–∫–æ—Ç–æ—Ä–æ–º—É —É—Å–ª–æ–≤–∏—é.

-- –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Œ£ —Ç–∏–ø—É
data TQsome (A : Set) (v : A ‚Üí Set) : Set where
  qsome : (a : A) (va : v a) ‚Üí TQsome A v

-- –¢–æ –∂–µ, –Ω–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–∞–∫ –∑–∞–ø–∏—Å—å.
-- record –º–æ–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫ —Å–∏—Ç—É–∞—Ü–∏—é.
record RQsome (A : Set) (v : A ‚Üí Set) : Set where
  field
    a  : A
    va : v a

-- –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–µ–æ—Ä–∏–∏ —Ç–∏–ø–æ–≤ (–Ω–µ –≤ Agda) —ç—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ
-- —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–∞–≤–∏–ª–æ–º –¥–ª—è —Ç–∏–ø–∞ —Ñ—É–Ω–∫—Ü–∏–π
data TQall (A : Set) (v : A ‚Üí Set) : Set where
  qall : ((x : A) ‚Üí v x) ‚Üí TQall A v

record RQall (A : Set) (v : A ‚Üí Set) : Set where
  field
    fun : (x : A) ‚Üí v x

-- –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ‚ä•, –Ω–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
data TQno (A : Set) (v : A ‚Üí Set) : Set where

_ : ¬¨ (TQno boy runs)
_ = Œª ()

data TBoth (A : Set) (v : A ‚Üí Set) : Set where
  qboth : (a b : A) ‚Üí a ‚â¢ b ‚Üí ((x : A) ‚Üí (x ‚â° a) ‚äé (x ‚â° b)) ‚Üí TBoth A v


data TQthe (A : Set) {A‚Çö : Pointed A} (v : A ‚Üí Set) : Set where
  qthe : v (the A‚Çö) ‚Üí TQthe A v 

record RQthe (A : Set) {A‚Çö : Pointed A} (v : A ‚Üí Set) : Set where
  constructor rqthe
  field
    va : v (the A‚Çö)
    
_ : TQthe boy {record { the = John }} runs
_ = qthe jr 

_ : RQthe boy {record { the = John }} runs
_ = rqthe jr


data girl : Set where
  Mary : girl

postulate
  runs' : girl ‚Üí Set
  mr : runs' Mary

_ : TQthe girl {record { the = Mary }} runs'
_ = qthe mr

_ : RQthe girl {record {the = Mary}} runs'
_ = rqthe mr

-- all girls run
awr : (x : girl) ‚Üí runs' x
awr Mary = mr

postulate
  _likes_ : boy ‚Üí girl ‚Üí Set
  jlm : John likes Mary

-- John likes the girl
_ : TQthe girl {record {the = Mary}} (Œª x ‚Üí John likes x)
_ = qthe jlm


-- John likes some girl
_ : TQsome girl (Œª x ‚Üí John likes x)
_ = qsome Mary jlm


-- John likes all girls
_ : TQall girl (Œª x ‚Üí John likes x)
_ = qall Œª { Mary ‚Üí jlm }


-- some boy likes the girl
_ : TQsome boy (Œª x ‚Üí TQthe girl {record { the = Mary }} (Œª y ‚Üí x likes y))
_ = qsome John (qthe jlm)

-- some boy likes all girls
_ : TQsome boy (Œª x ‚Üí TQall girl (Œª y ‚Üí x likes y))
_ = qsome John (qall Œª { Mary ‚Üí jlm })

-- –∑–¥–µ—Å—å –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è 'a likes b' –º—ã –∏–º–µ–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
-- 'x likes y' –¥–ª—è x, y, –≤—ã–±–∏—Ä–∞–µ–º—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∫–≤–∞–Ω—Ç–æ—Ä–∞–º.


-- –î–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫–ª—è.

postulate
  blm : (x : boy) ‚Üí x likes Mary  -- every boy likes Mary
  blg : (x : boy) ‚Üí Œ£ girl (Œª y ‚Üí x likes y)
  
-- every boy likes a girl (the same)
_ : TQall boy (Œª x ‚Üí TQsome girl (Œª y ‚Üí x likes y))
_ = qall Œª x ‚Üí qsome Mary (blm x)

-- (1) every boy likes a girl (his own)
_ : TQall boy (Œª x ‚Üí TQsome girl (Œª y ‚Üí x likes y))
_ = qall Œª x ‚Üí qsome (proj‚ÇÅ (blg x)) (proj‚ÇÇ (blg x))

-- Here types are the same but terms differ.
-- Ambiguity is reflected in terms, not in types.
-- This means that types are not enough to express meanings!

-- The first meaning _can_ be expressed differently:

-- (2) there is a girl every boy likes
_ : TQsome girl (Œª y ‚Üí TQall boy (Œª x ‚Üí x likes y))
_ = qsome Mary (qall blm)

-- But the second meaning can _not_ be written unambiguously, can it?

-- maybe this way? unlikely
_ : TQall boy (Œª x ‚Üí TQsome (Œ£ girl (Œª y ‚Üí x likes y)) (Œª z ‚Üí x likes (proj‚ÇÅ z)))
_ = qall (Œª x ‚Üí qsome (blg x) (proj‚ÇÇ (blg x)))

-- Anyway, the condition that girls are different should be stated separately.

-- See Ranta TTG, 3.2 (about the precedence of quantifiers).


-- –í (2) —è–≤–Ω–æ —Å–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –¥–µ–≤–æ—á–∫–∞ –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ. –ù–æ –≤ (1) —ç—Ç–æ –Ω–µ —Å–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ; –ø–æ—ç—Ç–æ–º—É
-- –º–æ–∂–µ—Ç —Ç–∞–∫ –æ–∫–∞–∑–∞—Ç—å—Å—è, —á—Ç–æ –æ–Ω–∞ –æ–¥–Ω–∞, –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç.  –ü–æ—ç—Ç–æ–º—É (1) –∏–º–µ–µ—Ç –æ–±–∞
-- –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ -- –∏ –¥–ª—è –æ–¥–Ω–æ–π –¥–µ–≤–æ—á–∫–∏, –∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö.



-- == Personal nouns ==

data TQpn {A : Set} (a : A) (v : A ‚Üí Set) : Set where
  qpn : v a ‚Üí TQpn a v

-- Mary runs
_ : TQpn Mary runs' 
_ = qpn mr

-- John runs
_ : TQpn John runs 
_ = qpn jr


-- situation "name" + "v name"
record RQpn {A : Set} (name : A) (v : A ‚Üí Set) : Set where
  constructor rqpn
  field
    p    : v name       -- condition on Œ£ A v

-- situation "Mary runs"
_ : RQpn Mary runs' 
_ = rqpn mr




------------------------------------------------------------------------
-- == Continuations == --
-- See Barker Ch. - Continuations and the nature of quantification (2002).

CsomeA : {A : Set} ‚Üí (C : A ‚Üí Set) ‚Üí Set
-- Csome A = (v : A ‚Üí Set) ‚Üí Œ£ A v
CsomeA {A} C = Qsome A C

Call : {A : Set} ‚Üí (C : A ‚Üí Set) ‚Üí Set
-- Call A = (v : A ‚Üí Set) ‚Üí ((x : A) ‚Üí v x)
Call {A} C = Qall A C

Cthe : (A : Set) {A‚Çö : Pointed A} ‚Üí Set‚ÇÅ
Cthe A {A‚Çö} = (v : A ‚Üí Set) ‚Üí Qthe A {A‚Çö} v

-- ??
CsomeP : {A : Set} ‚Üí (C : (A ‚Üí Set) ‚Üí Set) ‚Üí Set‚ÇÅ
CsomeP {A} C = (v : A ‚Üí Set) ‚Üí Qsome A (Œª x ‚Üí (C v))

Cid : ‚àÄ {‚Ñì} (A : Set ‚Ñì) ‚Üí Set ‚Ñì
Cid A = A


Cpn : {A : Set} (a : A) ‚Üí (v : A ‚Üí Set) ‚Üí Set _
Cpn {A} a = Œª (v : A ‚Üí Set) ‚Üí Qpn a v 

Cjohn : (boy ‚Üí Set) ‚Üí Set 
Cjohn = Œª (C : boy ‚Üí Set) ‚Üí C John
Cruns = Œª (C : (boy ‚Üí Set) ‚Üí Set) ‚Üí C runs
Cruns' = Œª (C : (girl ‚Üí Set) ‚Üí Set) ‚Üí C runs'

-- John runs
S1 : ‚àÄ {‚Ñì} {A : Set ‚Ñì} ‚Üí (Set ‚Üí Set) ‚Üí Set
S1 {A = A} = Œª (C : Set ‚Üí Set) ‚Üí Cruns (Œª v ‚Üí (Cjohn (Œª x ‚Üí C (v x))))

_ : S1 {A = boy} Cid
_ = jr


-- some boy runs
S2 : {A : Set} ‚Üí (Set ‚Üí Set) ‚Üí Set
S2 {A = boy} = Œª (C : Set ‚Üí Set) ‚Üí Cruns (Œª v ‚Üí (CsomeA v)) 

_ : S2 {A = boy} Cid
_ = John , jr

-- -- some boy runs
-- S3 : ‚àÄ {‚Ñì} {A : Set ‚Ñì} ‚Üí (Set ‚Üí Set) ‚Üí Set (lsuc ‚Ñì)
-- S3 {A = boy} = Œª (C : Set ‚Üí Set) ‚Üí CsomeP (Œª v ‚Üí (Cruns v)) 

-- _ : S3 {A = boy} Cid
-- _ = John , jr

-- all girls run
S4 : {A : Set} ‚Üí (Set ‚Üí Set) ‚Üí Set
S4 {A = girl} = Œª (C : Set ‚Üí Set) ‚Üí Cruns' (Œª v ‚Üí Call v)

_ : S4 {A = girl} Cid
_ = awr



------------------------------------------------------------------------
-- –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä: "—Ç–∞–∫–æ–π x, —á—Ç–æ v x", "—Ç–æ—Ç A, —á—Ç–æ v".
-- –í–æ–æ–±—â–µ, Œ£-—Ç–∏–ø —ç—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä.
-- –¢–æ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–æ–ø—Ä–æ—Å–∞—Ö: What x, such that vx?
-- (What do I know? = What x, I know x?)

Œπ-syntax : ‚àÄ {a b} (A : Set a) ‚Üí (A ‚Üí Set b) ‚Üí Set (a ‚äî b)
Œπ-syntax = Œ£ 

syntax Œπ-syntax A (Œª x ‚Üí vx) = Œπ[ x ‚àà A ] vx 

Qdesc : QUANTIFIER
Qdesc A v = Œ£ A v

-- –í–∞—Ä–∏–∞–Ω—Ç —Å –Ω–µ—è–≤–Ω—ã–º A
Œπ-syntax' : ‚àÄ {a b} {A : Set a} ‚Üí (A ‚Üí Set b) ‚Üí Set (a ‚äî b)
Œπ-syntax' {A = A} v = Œ£ A v 

syntax Œπ-syntax' (Œª x ‚Üí vx) = Œπ[ x ] vx 


 
-- x such that boy, runs   -- indefinite description
_ : Qdesc boy runs
_ = John , jr

_ : Œπ[ x ‚àà boy ] runs x
_ = John , jr

_ : Œπ[ x ] runs x
_ = John , jr

